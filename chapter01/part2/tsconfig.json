{
  // 使用tsc -init 创建ts配置文件
  /**
    tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
      "include" 用来指定哪些ts文件需要被编译
        路径：  * 表示任意文件
                ** 表示任意目录
      "exclude" 不需要被编译的文件目录
          默认值 ["node_modules","bower_components","jspm_packages"]
      
      
  */
  "include": [
    "./src/**/*"
  ],
  "exclude": [
    "./src/hello/**/*"
  ],
  /**
    compilerOptions 编译器的选项
  */
  "compilerOptions": {
    // target 指定ts编译ES的版本
    "target":"ES3",
    // module 指定要使用模块化的规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'esnext'.
    // amd || system 的时候才可以合并文件
    "module": "es6",

    // lib 用来指定项目在使用的库
    // "lib":["es6"],
    
    // outDir 用来指定编译后文件所在目录
    "outDir": "./dist",

    // outFile 将代码合并为一个文件
    //  所有全局作用域中的代码会合并到同一文件中
    // "outFile": "./dist/app.js",

    // allowJS 是否对js文件进行编译，默认是false
    "allowJs": true,

    // 是否检查js代码是否符合语法规范，默认是false
    "checkJs": false,

    // 是否移除注释
    "removeComments": false,

    // 不生成编译后的文件 通常用来检查语法
    "noEmit": false,

    // 当有错误时，不生产编译后的文件
    "noEmitOnError": true,

    // 所有严格检查的总开关 ** 建议开启
    "script":true,

    // 用来设置编译后的js文件是否使用严格模式，默认false
    "alwaysStrict": true,

    // 是否不允许使用 隐式的 any
    "noImplicitAny": false,

    // 不允许使用不明确类型的 this
    "noImplicitThis":true,

    // 严格的检查空值
    "strictNullChecks":true,



  }

}
